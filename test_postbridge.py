#!/usr/bin/env python3
"""
Script de test pour v√©rifier la connexion √† l'API Post Bridge.
"""

import requests
import json


def test_api_connection():
    """Teste la connexion √† l'API et affiche les comptes disponibles."""
    
    API_KEY = "pb_live_FdrG5jubHBJvtGLkgXvRof"
    BASE_URL = "https://api.post-bridge.com/v1"
    
    headers = {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json'
    }
    
    print("=" * 60)
    print("üß™ TEST DE CONNEXION √Ä POST BRIDGE")
    print("=" * 60)
    
    # Test 1: R√©cup√©rer les comptes sociaux
    print("\n1Ô∏è‚É£  Test: R√©cup√©ration des comptes sociaux...")
    
    try:
        response = requests.get(
            f"{BASE_URL}/social-accounts",
            headers=headers
        )
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            accounts = data.get('data', [])
            
            print(f"   ‚úÖ Succ√®s! {len(accounts)} compte(s) trouv√©(s)\n")
            
            if accounts:
                print("   üìã Vos comptes connect√©s:")
                for acc in accounts:
                    print(f"      ‚Ä¢ {acc['platform'].upper()}: @{acc['username']} (ID: {acc['id']})")
            else:
                print("   ‚ö†Ô∏è  Aucun compte connect√©")
                print("   ‚Üí Connectez vos comptes sur https://www.post-bridge.com/")
            
            # Compter les comptes Twitter/X
            twitter_accounts = [a for a in accounts if a['platform'] in ['twitter', 'x']]
            if twitter_accounts:
                print(f"\n   üê¶ {len(twitter_accounts)} compte(s) Twitter/X disponible(s) pour poster")
            else:
                print("\n   ‚ö†Ô∏è  Aucun compte Twitter/X trouv√©")
                print("   ‚Üí Vous devez connecter au moins un compte Twitter/X")
        
        elif response.status_code == 401:
            print("   ‚ùå Erreur 401: Cl√© API invalide")
            print("   ‚Üí V√©rifiez votre cl√© API dans postbridge_config.json")
        else:
            print(f"   ‚ùå Erreur {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
        return False
    
    # Test 2: R√©cup√©rer les posts existants
    print("\n2Ô∏è‚É£  Test: R√©cup√©ration des posts existants...")
    
    try:
        response = requests.get(
            f"{BASE_URL}/posts?limit=5",
            headers=headers
        )
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            posts = data.get('data', [])
            meta = data.get('meta', {})
            total = meta.get('total', 0)
            
            print(f"   ‚úÖ Succ√®s! {total} post(s) trouv√©(s) au total")
            
            if posts:
                print(f"\n   üìù Derniers posts (max 5):")
                for i, post in enumerate(posts[:5], 1):
                    caption = post['caption'][:50] + "..." if len(post['caption']) > 50 else post['caption']
                    status = post['status']
                    print(f"      {i}. [{status.upper()}] {caption}")
        else:
            print(f"   ‚ùå Erreur {response.status_code}")
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erreur: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ TESTS TERMIN√âS")
    print("=" * 60)
    
    print("\nüí° Prochaines √©tapes:")
    print("   1. Assurez-vous d'avoir au moins un compte Twitter/X connect√©")
    print("   2. Lancez: python postbridge_poster.py --accounts NOM_COMPTE --max-posts 1")
    print("   3. V√©rifiez le r√©sultat sur https://www.post-bridge.com/")
    

if __name__ == '__main__':
    test_api_connection()

